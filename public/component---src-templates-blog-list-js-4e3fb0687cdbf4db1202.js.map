{"version":3,"sources":["webpack:///./src/components/PostItem/styled.js","webpack:///./src/components/PostItem/index.js","webpack:///./src/components/Pagination/styled.js","webpack:///./src/components/Pagination/index.js","webpack:///./src/templates/blog-list.js"],"names":["PostItemLink","styled","AniLink","PostItemWrapper","section","PostItemInfo","div","PostItemDate","time","PostItemTitle","h1","PostItem","slug","date","title","to","cover","direction","bg","duration","PaginationWrapper","Pagination","isFirst","isLast","prevPage","nextPage","query","BlogList","props","postList","data","allMarkdownRemark","edges","pageContext","currentPage","numPages","Layout","home","map","node","frontmatter","fields"],"mappings":"gMAIaA,EAAeC,YAAOC,KAAV,2EAAGD,CAAH,6LAeZE,EAAkBF,IAAOG,QAAV,8EAAGH,CAAH,yDAMfI,EAAeJ,IAAOK,IAAV,2EAAGL,CAAH,2BAIZM,EAAeN,IAAOO,KAAV,2EAAGP,CAAH,sGAQZQ,EAAgBR,IAAOS,GAAV,4EAAGT,CAAH,sGCfXU,EAjBE,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAMC,EAAf,EAAeA,MAAf,OACf,kBAAC,EAAD,CAAgBC,GAAIH,EAAMI,OAAK,EAACC,UAAU,QAAQC,GAAG,OAAOC,SAAU,IACpE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KAAiBN,GACjB,kBAAC,EAAD,KAAkBC,OCRbM,EAAoBnB,IAAOG,QAAV,4EAAGH,CAAH,mOC2CfoB,EAvCI,SAAC,GAAD,IACjBC,EADiB,EACjBA,QACAC,EAFiB,EAEjBA,OACAC,EAHiB,EAGjBA,SACAC,EAJiB,EAIjBA,SAJiB,OAMf,kBAAC,EAAD,MACIH,GACA,kBAAC,IAAD,CACEP,GAAIS,EACJR,OAAK,EACLC,UAAU,OACVC,GAAG,OACHC,SAAU,IALZ,WAUAI,GACA,kBAAC,IAAD,CACER,GAAIU,EACJT,OAAK,EACLC,UAAU,QACVC,GAAG,OACHC,SAAU,IALZ,YCzBR,sCAQA,IAqCaO,EAAK,WAyBHC,UA9DE,SAAAC,GACf,IAAMC,EAAWD,EAAME,KAAKC,kBAAkBC,MADtB,EAGUJ,EAAMK,YAAhCC,EAHgB,EAGhBA,YACFZ,EAA0B,IAAhBY,EACVX,EAASW,IALS,EAGHC,SAGfX,EAAWU,EAAc,GAAM,EAAI,IAAxB,UAAuCA,EAAc,GAChET,EAAQ,UAAYS,EAAc,GAExC,OACE,kBAACE,EAAA,EAAD,CAAQC,MAAM,GACZ,kBAAC,IAAD,CAAKvB,MAAM,SAEVe,EAASS,KACR,oBACEC,KADF,IAEIC,YAAe3B,EAFnB,EAEmBA,KAAMC,EAFzB,EAEyBA,MACXF,EAHd,EAGI6B,OAAU7B,KAHd,OAMI,kBAAC,EAAD,CACEA,KAAMA,EACNC,KAAMA,EACNC,MAAOA,OAIf,kBAAC,EAAD,CACEQ,QAASA,EACTC,OAAQA,EACRC,SAAUA,EACVC,SAAUA","file":"component---src-templates-blog-list-js-4e3fb0687cdbf4db1202.js","sourcesContent":["import styled from \"styled-components\"\nimport media from \"styled-media-query\"\nimport AniLink from \"gatsby-plugin-transition-link/AniLink\"\n\nexport const PostItemLink = styled(AniLink)`\n  color: #8899a6;\n  display: inline-block;\n  width: 100%;\n  padding: 20px;\n  margin: 1%;\n  box-sizing: border-box;\n  border-bottom: 1px solid #eee;\n  text-decoration: none;\n  vertical-align: top;\n  &:hover {\n    color: #1fa1f2;\n  }\n`\n\nexport const PostItemWrapper = styled.section`\n  align-items: center;\n  display: inline-block;\n  width: 100%;\n`\n\nexport const PostItemInfo = styled.div`\n  display: inline-block;\n`\n\nexport const PostItemDate = styled.time`\n  vertical-align: top;\n  font-size: 1.1rem;\n  display: inline-block;\n  margin: 8px 30px 10px 0;\n  min-width: 160px;\n`\n\nexport const PostItemTitle = styled.h1`\n  font-size: 1.6rem;\n  font-weight: 700;\n  margin: 0;\n  display: inline-block;\n  line-height: 30px;\n  overflow: hidden;\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport * as S from \"./styled\"\n\n\nconst PostItem = ({ slug, date, title }) => (\n  <S.PostItemLink to={slug} cover direction=\"right\" bg=\"#fff\" duration={0.6}>\n    <S.PostItemWrapper>\n      <S.PostItemInfo>\n        <S.PostItemDate>{date}</S.PostItemDate>\n        <S.PostItemTitle>{title}</S.PostItemTitle>\n      </S.PostItemInfo>\n    </S.PostItemWrapper>\n  </S.PostItemLink>\n)\n\nPostItem.propTypes = {\n  slug: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired\n}\n\nexport default PostItem\n","import styled from \"styled-components\"\n\nexport const PaginationWrapper = styled.section`\n  align-items: center;\n  margin: 20px 0;\n  text-align: center;\n  padding: 1.5rem 3rem;\n  justify-content: space-between;\n  a {\n    text-decoration: none;\n    transition: color 0.5s;\n    font-size: 1.6rem;\n    font-weight: 700;\n    margin-right: 20px;\n    &:hover {\n      color: #1fa1f2;\n    }\n  }\n`\n","import React from \"react\"\nimport propTypes from \"prop-types\"\nimport AniLink from \"gatsby-plugin-transition-link/AniLink\"\nimport * as S from \"./styled\"\n\n\nconst Pagination = ({\n  isFirst,\n  isLast,\n  prevPage,\n  nextPage,\n}) => (\n    <S.PaginationWrapper>\n      {!isFirst && (\n        <AniLink\n          to={prevPage}\n          cover\n          direction=\"left\"\n          bg=\"#fff\"\n          duration={0.6}\n        >\n          ← Prev\n        </AniLink>\n      )}\n      {!isLast && (\n        <AniLink\n          to={nextPage}\n          cover\n          direction=\"right\"\n          bg=\"#fff\"\n          duration={0.6}\n        >\n          Next →\n      </AniLink>\n      )}\n    </S.PaginationWrapper>\n  )\n\nPagination.propTypes = {\n  isFirst: propTypes.bool.isRequired,\n  isLast: propTypes.bool.isRequired,\n  prevPage: propTypes.string,\n  nextPage: propTypes.string,\n}\n\nexport default Pagination","import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/Layout\"\nimport SEO from \"../components/seo\"\nimport PostItem from \"../components/PostItem\"\nimport Pagination from \"../components/Pagination\"\n\nconst BlogList = props => {\n  const postList = props.data.allMarkdownRemark.edges\n\n  const { currentPage, numPages } = props.pageContext\n  const isFirst = currentPage === 1\n  const isLast = currentPage === numPages\n  const prevPage = currentPage - 1 === 1 ? '/' : `/page/${currentPage - 1}`\n  const nextPage = `/page/${currentPage + 1}`\n\n  return (\n    <Layout home={true}>\n      <SEO title=\"Home\" />\n\n      {postList.map(\n        ({\n          node: {\n            frontmatter: { date, title },\n            fields: { slug },\n          },\n        }) => (\n            <PostItem\n              slug={slug}\n              date={date}\n              title={title}\n            />\n          )\n      )}\n      <Pagination\n        isFirst={isFirst}\n        isLast={isLast}\n        prevPage={prevPage}\n        nextPage={nextPage}\n      />\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query PostList($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(\n      sort: { fields: frontmatter___date, order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\", locale: \"en-us\")\n            image\n            title\n            description\n          }\n          timeToRead\n        }\n      }\n    }\n  }\n`\n\nexport default BlogList\n"],"sourceRoot":""}