{"componentChunkName":"component---src-templates-blog-post-js","path":"/testing-with-cypress/","result":{"data":{"markdownRemark":{"fields":{"slug":"/testing-with-cypress/"},"frontmatter":{"title":"Testing applications with Cypress","description":"Your headaches are over","image":"https://i.imgur.com/3N55xi3.jpg","date":"September 17, 2018"},"html":"<p><strong>End-to-end tests are excellent because they reflect the actions of users.</strong> This category of tests behaves like a real human, validating various parts of the application at the same time. <em><a href=\"https://www.cypress.io/\">Cypress</a></em> is a new <em>test runner</em> with the premise of being fast, easy and reliable for tests that runs in a browser.</p>\n<p><strong>NOTE:</strong> The ideal is to always make a test fail, then make it pass and finally refactor it. But for <em>Cypress</em> studies, most of the examples did not follow that order.</p>\n<h3>What comes next</h3>\n<ul>\n<li><em>Cypress</em> instalation</li>\n<li>Configuring the test environment</li>\n<li>Making our first test</li>\n<li>Running our first test</li>\n<li>Checking a page element</li>\n<li>Testing the responsiveness of our elements</li>\n<li>How can we go deeper</li>\n</ul>\n<h3>Installing Cypress</h3>\n<p>We can use <em>npm</em> install. Type in your terminal:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install --save-dev cypress</code></pre></div>\n<p>If everything goes well, we can now writer our first tests.</p>\n<h3>Test configuration</h3>\n<p>I'll use <a href=\"https://tailomateus.github.io/\">my personal website</a> as an example. By default <em>Cypress</em> expects the integration tests to be inside the <em>cypress/integration</em> folders, so we'll have to create them.</p>\n<p>If you do not want to use this default path, you can create a <em>cypress.json</em> <a href=\"https://docs.cypress.io/guides/references/configuration.html\">configuration file</a> at the root of your directory.</p>\n<h3>Testing the page title</h3>\n<p>Our first test is very simple, we'll just check if the page title is working properly.</p>\n<p>Inside the <em>cypress/integration</em> folder I created a file called <em>sample-spec.js</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">describe(&#39;Personal website home page&#39;, () =&gt; {\n  it(&#39;contains &quot;Tailo Mateus Gonsalves&quot; in the title&#39;, () =&gt; {\n  })\n})</code></pre></div>\n<p>The <em>describe</em> has two arguments, a string with the subject and a <em>callback function</em> that executes any code, within this function we can include several <em>it's</em> (several tests). The <em>it</em> function also expects two parameters. The return of the function should check our claim of the test against reality.</p>\n<p>To test the homepage we will have to say where it is. As all our tests will be done on this page, so we can add it in a place that always runs before our tests:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">describe(&#39;Personal Website home page&#39;, () =&gt; {\n  beforeEach(() =&gt; {\n    cy.visit(&#39;https://tailomateus.github.io/&#39;)\n  })\n  \n  it(&#39;contains &quot;Tailo Mateus Gonsalves&quot; in the title&#39;, () =&gt; {\n    cy.title().should(&#39;contain&#39;, &#39;Tailo Mateus Gonsalves)\n  })\n})</code></pre></div>\n<p>In the above example we added the <em><a href=\"https://docs.cypress.io/api/commands/visit.html\">cy.visit()</a></em> function in our <em>beforeEach</em>, so we ensure that before running a test, the code will know which page we are testing. We are claiming that the title of the page contains the name “Tailo Mateus Gonsalves”, <a href=\"https://docs.cypress.io/guides/references/assertions.html#Chai\">you can see other assertions supported here.</a></p>\n<h3>Running our first test</h3>\n<p>Since <em>Cypress</em> is not installed globally, we have to add the path of the <em>bin</em> folder  inside our folder <em>node_modules</em>. Use this command at the root of the project:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(npm bin)/cypress open</code></pre></div>\n<p>On my machine it was like that:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">node_modules/cypress/bin/cypress open</code></pre></div>\n<p>If all goes well, this interface will open:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*LolhBhXNFHk0ne-Q1qIDRg.png\"></p>\n<p>The file we created is available, so we can run our test. We have an interface where we can see how our page is behaving and the results obtained.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*xb7WjOdjOUJe43hK3NhRYA.png\"></p>\n<h3>Checking an element on the page</h3>\n<p>Now let’s check if an element is actually present on the page. In this test we will validate if the profile image is visible.</p>\n<p>As we are testing the same page, we can do in the same <em>describe</em>, just by adding a new <em>it</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">it(&#39;has a visible profile picture&#39;, () =&gt; {\n  cy.get(&#39;.img_profile&#39;).should(&#39;be.visible&#39;)\n})</code></pre></div>\n<p>This test uses <em><a href=\"https://docs.cypress.io/api/commands/get.html#Syntax\">cy.get()</a></em> to capture the element. If the element is being loaded asynchronously, this function will wait for <em>defaultCommandTimeout</em> to appear (the default value is 4 seconds and can be set to <em><a href=\"https://docs.cypress.io/guides/references/configuration.html#Timeouts\">cypress.json</a></em>).</p>\n<p>Result of our tests:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*yZFX1NmJavGysMbeYntbUQ.png\"></p>\n<p>But if for some reason we made a mistake in the test, the result will be like that:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*YvE1hed6KvHJ7TBH1j-JOg.png\"></p>\n<h3>Testing responsiveness</h3>\n<p>Let’s do a slightly different test. I currently have to make sure the website will work in different dimensions. That way, all users will be able to use it correctly.</p>\n<p>Since we are still testing the same page, we will only add another <em>describe</em> within the existing one. Here we test the width of 320px and check if the profile image is still visible. To change the width for this test, we can use <em><a href=\"https://docs.cypress.io/api/commands/viewport.html#Syntax\">cy.viewport()</a></em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">describe(&#39;with a 320x568 viewport&#39;, () =&gt; {\n  beforeEach(() =&gt; {\n    cy.viewport(320, 568);\n  })\n   it(&#39;has a visible mobile profile picture&#39;, () =&gt; {\n    cy.get(&#39;.img_profile&#39;).should(&#39;be.visible&#39;)\n  })\n})</code></pre></div>\n<p>By default the size is 1000×660, but we can change it in the configuration file, <em>cypress.json</em> mentioned earlier. You can test any screen size. see how our test was on mobile:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*TB71xoVOqBCoE26FHt3Vjg.png\"></p>\n<h3>I want to go deeper</h3>\n<p><a href=\"https://docs.cypress.io/api/introduction/api.html#Sections\">In the documentation</a> itself you will find several examples. But if you want something visible, when you install <em>Cypress</em>, you will have a folder called \"examples\" with more than 100 tests to run.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*L2_GisT-XWYYqRDF8HLquA.png\"></p>\n<p>As you can see in the image, there are several types of functions. One cool thing that has not been explored in this article is how <em>Cypress</em> ranks between the <em>ajax</em> and <em>front-end</em> responses. We can control the results we get from the server.</p>\n<p><strong>As your project gains new features, the chances of errors occurring increase dramatically.</strong> And I know you do not want that. So just test and start implementing it in your projects.</p>\n<p><strong>The codes of the examples are in <a href=\"https://github.com/TailoMateus/testing_personal_site_cypress\">GitHub</a>.</strong></p>\n<p><strong>Acknowledgments:</strong> <em>This text was reviewed by <a href=\"https://github.com/macpardo\">Marcos Gobbi</a></em> </p>\n<h3>Credits and References:</h3>\n<p><a href=\"https://docs.cypress.io/api/introduction/api.html#Sections\">Cypress Documentation</a>\n<a href=\"https://css-tricks.com/an-intro-to-web-app-testing-with-cypress-io/\">An Intro to Web Site Testing with Cypress</a></p>","timeToRead":5}},"pageContext":{"slug":"/testing-with-cypress/","previousPost":{"frontmatter":{"title":"Analisando a solução para um Sudoku"},"fields":{"slug":"/analisando-solucao-sudoku/"}},"nextPost":{"fields":{"slug":"/goal-setting/"},"frontmatter":{"title":"Rethinking goal setting"}}}}}