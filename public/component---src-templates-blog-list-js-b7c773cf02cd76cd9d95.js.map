{"version":3,"sources":["webpack:///./src/components/PostItem/styled.js","webpack:///./src/components/PostItem/index.js","webpack:///./src/components/Pagination/styled.js","webpack:///./src/components/Pagination/index.js","webpack:///./src/templates/blog-list.js"],"names":["PostItemLink","styled","AniLink","props","search","media","lessThan","PostItemWrapper","section","PostItemInfo","div","PostItemDate","time","PostItemTitle","h1","PostItemDescription","p","GroupImage","PostItem","slug","image","titleImage","date","timeToRead","title","description","to","cover","direction","bg","duration","width","src","alt","PaginationWrapper","Pagination","isFirst","isLast","prevPage","nextPage","query","BlogList","postList","data","allMarkdownRemark","edges","pageContext","currentPage","numPages","Layout","map","node","frontmatter","fields"],"mappings":"kdAIO,IAAMA,EAAeC,YAAOC,KAAV,2EAAGD,CAAH,4LAGd,SAAAE,GAAK,OAAIA,EAAMC,OAAS,OAAS,QAWxCC,IAAMC,SAAS,SAAfD,CAdqB,KAeZ,SAAAF,GAAK,OAAIA,EAAMC,OAAS,OAAS,SAG1CC,IAAMC,SAAS,QAAfD,CAlBqB,KAmBZ,SAAAF,GAAK,OAAIA,EAAMC,OAAS,OAAS,UAIjCG,EAAkBN,IAAOO,QAAV,8EAAGP,CAAH,yDAMfQ,EAAeR,IAAOS,IAAV,2EAAGT,CAAH,2BAIZU,EAAeV,IAAOW,KAAV,2EAAGX,CAAH,4DAMZY,EAAgBZ,IAAOa,GAAV,4EAAGb,CAAH,kGASbc,EAAsBd,IAAOe,EAAV,kFAAGf,CAAH,oFAQnBgB,EAAahB,IAAOS,IAAV,yEAAGT,CAAH,qCAInBI,IAAMC,SAAS,SAAfD,CAJmB,MC1BRa,IA7BE,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,WAAYC,EAA5B,EAA4BA,KAAMC,EAAlC,EAAkCA,WAAYC,EAA9C,EAA8CA,MAAOC,EAArD,EAAqDA,YAAarB,EAAlE,EAAkEA,OAAlE,OACf,kBAAC,EAAD,CAAgBsB,GAAIP,EAAMf,OAAQA,EAAQuB,OAAK,EAACC,UAAU,QAAQC,GAAG,OAAOC,SAAU,IACpF,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,yBAAKC,MAAM,OAAOC,IAAKZ,EAAOa,IAAKZ,KAErC,kBAAC,EAAD,KACE,kBAAC,EAAD,KAAiBC,EAAjB,MAAwC,GAAdC,EAAqBA,EAArB,UAA8CA,EAA9C,WAA1B,YACA,kBAAC,EAAD,KACGC,GAEH,kBAAC,EAAD,KACGC,Q,2HCfES,E,UAAoBjC,EAAOO,QAAV,4EAAGP,CAAH,iNC2CfkC,EAvCI,SAAC,GAAD,IACjBC,EADiB,EACjBA,QACAC,EAFiB,EAEjBA,OACAC,EAHiB,EAGjBA,SACAC,EAJiB,EAIjBA,SAJiB,OAMf,kBAAC,EAAD,MACIH,GACA,kBAAC,IAAD,CACEV,GAAIY,EACJX,OAAK,EACLC,UAAU,OACVC,GAAG,OACHC,SAAU,IALZ,WAUAO,GACA,kBAAC,IAAD,CACEX,GAAIa,EACJZ,OAAK,EACLC,UAAU,QACVC,GAAG,OACHC,SAAU,IALZ,YCzBR,sCAQA,IA2CaU,EAAK,aA0BHC,UArEE,SAAAtC,GACf,IAAMuC,EAAWvC,EAAMwC,KAAKC,kBAAkBC,MADtB,EAGU1C,EAAM2C,YAAhCC,EAHgB,EAGhBA,YACFX,EAA0B,IAAhBW,EACVV,EAASU,IALS,EAGHC,SAGfV,EAAWS,EAAc,GAAM,EAAI,IAAxB,UAAuCA,EAAc,GAChER,EAAQ,UAAYQ,EAAc,GAExC,OACE,kBAACE,EAAA,EAAD,KACE,kBAAC,IAAD,CAAKzB,MAAM,SAEVkB,EAASQ,KACR,oBACEC,KADF,IAEIC,YAAehC,EAFnB,EAEmBA,MAAOC,EAF1B,EAE0BA,WAAYC,EAFtC,EAEsCA,KAAMG,EAF5C,EAE4CA,YAAaD,EAFzD,EAEyDA,MACrDD,EAHJ,EAGIA,WACUJ,EAJd,EAIIkC,OAAUlC,KAJd,OAOI,kBAACD,EAAA,EAAD,CACEC,KAAMA,EACNC,MAAOA,EACPC,WAAYA,EACZC,KAAMA,EACNC,WAAYA,EACZC,MAAOA,EACPC,YAAaA,EACbrB,QAAQ,OAIhB,kBAAC,EAAD,CACEgC,QAASA,EACTC,OAAQA,EACRC,SAAUA,EACVC,SAAUA","file":"component---src-templates-blog-list-js-b7c773cf02cd76cd9d95.js","sourcesContent":["import styled from \"styled-components\"\nimport media from \"styled-media-query\"\nimport AniLink from \"gatsby-plugin-transition-link/AniLink\"\n\nexport const PostItemLink = styled(AniLink)`\n  color: #8899a6;\n  display: inline-block;\n  width: ${props => props.search ? \"100%\" : \"31%\"};\n  padding: 20px;\n  margin: 1%;\n  box-sizing: border-box;\n  border: 1px solid #eee;\n  text-decoration: none;\n  vertical-align: top;\n  &:hover {\n    color: #1fa1f2;\n  }\n\n  ${media.lessThan(\"medium\")`\n    width: ${props => props.search ? \"100%\" : \"48%\"};\n  `}\n\n  ${media.lessThan(\"small\")`\n    width: ${props => props.search ? \"100%\" : \"97%\"};\n  `}\n`\n\nexport const PostItemWrapper = styled.section`\n  align-items: center;\n  display: inline-block;\n  width: 100%;\n`\n\nexport const PostItemInfo = styled.div`\n  display: inline-block;\n`\n\nexport const PostItemDate = styled.time`\n  font-size: 0.9rem;\n  margin-top: 15px;\n  display: inline-block;\n`\n\nexport const PostItemTitle = styled.h1`\n  font-size: 1.5rem;\n  font-weight: 700;\n  margin: 20px 0;\n  height: 48px;\n  line-height: 24px;\n  overflow: hidden;\n`\n\nexport const PostItemDescription = styled.p`\n  font-size: 1.2rem;\n  font-weight: 300;\n  line-height: 23px;\n  height: 46px;\n  overflow: hidden;\n`\n\nexport const GroupImage = styled.div`\n  height: 150px;\n  overflow: hidden;\n\n  ${media.lessThan(\"medium\")`\n    height: auto;\n  `}\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport * as S from \"./styled\"\n\n\nconst PostItem = ({ slug, image, titleImage, date, timeToRead, title, description, search }) => (\n  <S.PostItemLink to={slug} search={search} cover direction=\"right\" bg=\"#fff\" duration={0.6}>\n    <S.PostItemWrapper>\n      <S.GroupImage>\n        <img width=\"100%\" src={image} alt={titleImage} />\n      </S.GroupImage>\n      <S.PostItemInfo>\n        <S.PostItemDate>{date} • {timeToRead == 1 ? `${timeToRead} minute` : `${timeToRead} minutes`} to read</S.PostItemDate>\n        <S.PostItemTitle>\n          {title}\n        </S.PostItemTitle>\n        <S.PostItemDescription>\n          {description}\n        </S.PostItemDescription>\n      </S.PostItemInfo>\n    </S.PostItemWrapper>\n  </S.PostItemLink>\n)\n\nPostItem.propTypes = {\n  slug: PropTypes.string.isRequired,\n  image: PropTypes.string.isRequired,\n  titleImage: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired,\n  timeToRead: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired\n}\n\nexport default PostItem\n","import styled from \"styled-components\"\n\nexport const PaginationWrapper = styled.section`\n  align-items: center;\n  margin: 20px 0;\n  text-align: center;\n  padding: 1.5rem 3rem;\n  justify-content: space-between;\n  a {\n    text-decoration: none;\n    transition: color 0.5s;\n    font-size: 18px;\n    margin-right: 20px;\n    &:hover {\n      color: #1fa1f2;\n    }\n  }\n`\n","import React from \"react\"\nimport propTypes from \"prop-types\"\nimport AniLink from \"gatsby-plugin-transition-link/AniLink\"\nimport * as S from \"./styled\"\n\n\nconst Pagination = ({\n  isFirst,\n  isLast,\n  prevPage,\n  nextPage,\n}) => (\n    <S.PaginationWrapper>\n      {!isFirst && (\n        <AniLink\n          to={prevPage}\n          cover\n          direction=\"left\"\n          bg=\"#fff\"\n          duration={0.6}\n        >\n          ← Prev\n        </AniLink>\n      )}\n      {!isLast && (\n        <AniLink\n          to={nextPage}\n          cover\n          direction=\"right\"\n          bg=\"#fff\"\n          duration={0.6}\n        >\n          Next →\n      </AniLink>\n      )}\n    </S.PaginationWrapper>\n  )\n\nPagination.propTypes = {\n  isFirst: propTypes.bool.isRequired,\n  isLast: propTypes.bool.isRequired,\n  prevPage: propTypes.string,\n  nextPage: propTypes.string,\n}\n\nexport default Pagination","import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/Layout\"\nimport SEO from \"../components/seo\"\nimport PostItem from \"../components/PostItem\"\nimport Pagination from \"../components/Pagination\"\n\nconst BlogList = props => {\n  const postList = props.data.allMarkdownRemark.edges\n\n  const { currentPage, numPages } = props.pageContext\n  const isFirst = currentPage === 1\n  const isLast = currentPage === numPages\n  const prevPage = currentPage - 1 === 1 ? '/' : `/page/${currentPage - 1}`\n  const nextPage = `/page/${currentPage + 1}`\n\n  return (\n    <Layout>\n      <SEO title=\"Home\" />\n\n      {postList.map(\n        ({\n          node: {\n            frontmatter: { image, titleImage, date, description, title },\n            timeToRead,\n            fields: { slug },\n          },\n        }) => (\n            <PostItem\n              slug={slug}\n              image={image}\n              titleImage={titleImage}\n              date={date}\n              timeToRead={timeToRead}\n              title={title}\n              description={description}\n              search={false}\n            />\n          )\n      )}\n      <Pagination\n        isFirst={isFirst}\n        isLast={isLast}\n        prevPage={prevPage}\n        nextPage={nextPage}\n      />\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query PostList($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(\n      sort: { fields: frontmatter___date, order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\", locale: \"en-us\")\n            image\n            title\n            titleImage\n            description\n          }\n          timeToRead\n        }\n      }\n    }\n  }\n`\n\nexport default BlogList"],"sourceRoot":""}