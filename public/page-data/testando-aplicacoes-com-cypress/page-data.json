{"componentChunkName":"component---src-templates-blog-post-js","path":"/testando-aplicacoes-com-cypress/","result":{"data":{"markdownRemark":{"fields":{"slug":"/testando-aplicacoes-com-cypress/"},"frontmatter":{"title":"Testando aplicações com Cypress","description":"As suas dores de cabeça acabaram","image":"https://i.imgur.com/3N55xi3.jpg","date":"September 10, 2018"},"html":"<p><strong>Testes end-to-end são excelentes pois refletem as ações dos usuários</strong>. Essa\ncategoria de testes se comportam como um humano real, validando várias partes da\naplicação ao mesmo tempo. O <a href=\"https://www.cypress.io/\">Cypress</a>, é um novo <em>test\nrunner</em> com a premissa de testes rápidos, fáceis e confiáveis para qualquer\ncoisa que seja executada em um navegador. </p>\n<p><strong>OBS</strong>: O ideal é sempre fazer um teste falhar, após fazer ele passar e por fim\na refatoração. Mas afim de estudos do <em>Cypress</em>, a maioria dos exemplos não\nseguiram essa ordem.</p>\n<h3>O que vem a seguir</h3>\n<ul>\n<li>Instalação do <em>Cypress</em></li>\n<li>Configuração do ambiente de testes</li>\n<li>Fazendo nosso primeiro teste</li>\n<li>Executando nosso primeiro teste</li>\n<li>Verificando um elemento da página</li>\n<li>Testando a responsividade de nossos elementos </li>\n<li>Como podemos nos aprofundar</li>\n</ul>\n<h3>Instalando Cypress</h3>\n<p>Podemos utilizar o <em>npm</em> para instalar, digite no seu terminal:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install --save-dev cypress</code></pre></div>\n<p>Se tudo ocorrer bem, agora podemos escrever nossos primeiros testes.</p>\n<h3>Configuração dos testes</h3>\n<p>Vou utilizar como exemplo <a href=\"https://tailomateus.github.io/\">meu site pessoal</a>.\nPor padrão o <em>Cypress</em> espera que os testes de integração estejam dentro das\npastas <em>cypress/integration</em>, então teremos que criá-las. </p>\n<p>Caso não queira utilizar esse caminho padrão, você pode criar um <a href=\"https://docs.cypress.io/guides/references/configuration.html\">arquivo de\nconfiguração</a>\n<em>cypress.json</em> na raiz do seu projeto, com qualquer caminho que desejar.</p>\n<h3>Testando o título da página</h3>\n<p>Nosso primeiro teste é muito simples, apenas testar se o título da página está\nfuncionando corretamente.</p>\n<p>Dentro da pasta <em>cypress/integration</em> criei um arquivo chamado <em>sample-spec.js</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">describe(&#39;Personal website home page&#39;, () =&gt; {\n  it(&#39;contains &quot;Tailo Mateus Gonsalves&quot; in the title&#39;, () =&gt; {\n  })\n})</code></pre></div>\n<p>A <em>describe</em> possui dois argumentos, uma string com o assunto e uma <em>função de\ncallback</em> que executa qualquer código, dentro dessa função vamos poder\nincluir vários <em>it</em> (vários testes). A função <em>it</em> também espera dois\nparâmetros. O retorno da função deve verificar nossa afirmação do teste contra a\nrealidade.</p>\n<p>Para testar a página inicial teremos que dizer onde ela está. Como todos os\nnossos testes serão feitos nessa página, podemos adicionar em um lugar que\nsempre é executado antes dos testes:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">describe(&#39;Personal Website home page&#39;, () =&gt; {\n  beforeEach(() =&gt; {\n    cy.visit(&#39;https://tailomateus.github.io/&#39;)\n  })\n  \n  it(&#39;contains &quot;Tailo Mateus Gonsalves&quot; in the title&#39;, () =&gt; {\n    cy.title().should(&#39;contain&#39;, &#39;Tailo Mateus Gonsalves)\n  })\n})</code></pre></div>\n<p>No exemplo acima adicionamos a função\n<a href=\"https://docs.cypress.io/api/commands/visit.html\">cy.visit()</a> no nosso\n<em>beforeEach</em>, com isso garantimos que antes de executar um teste, o código vai\nsaber qual é a página que estamos testando. Estamos afirmando que o título da\npágina contém o nome “Tailo Mateus Gonsalves”, <a href=\"https://docs.cypress.io/guides/references/assertions.html#Chai\">você pode ver aqui outras\nasserções suportadas.</a></p>\n<h3>Rodando nosso primeiro teste</h3>\n<p>Como o <em>Cypress</em> não está instalado globalmente, temos que adicionar o caminho\nda pasta <em>bin</em>, dentro da nossa pasta <em>node_modules</em>. Use esse comando na raiz\ndo projeto:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(npm bin)/cypress open</code></pre></div>\n<p>Na minha máquina ficou assim o caminho: </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">node_modules/cypress/bin/cypress open</code></pre></div>\n<p>Se tudo ocorrer bem, essa interface vai abrir:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*LolhBhXNFHk0ne-Q1qIDRg.png\">\n<span class=\"figcaption_hack\">Interface Cypress</span></p>\n<p>O arquivo que criamos está disponível para que possamos executar nosso teste.\nTemos uma interface, onde conseguimos visualizar como nossa página está se\ncomportando e os resultados obtidos.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*xb7WjOdjOUJe43hK3NhRYA.png\">\n<span class=\"figcaption_hack\">Executando os testes</span></p>\n<h3>Verificando um elemento na página</h3>\n<p>Agora vamos verificar se um elemento realmente esta presente na página. Neste\nteste vamos validar se a imagem do perfil esta visível.</p>\n<p>Como estamos testando a mesma página, podemos fazer no mesmo <em>describe</em>, apenas\nadicionando um novo <em>it</em>. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">it(&#39;has a visible profile picture&#39;, () =&gt; {\n  cy.get(&#39;.img_profile&#39;).should(&#39;be.visible&#39;)\n})</code></pre></div>\n<p>Este teste usa <a href=\"https://docs.cypress.io/api/commands/get.html#Syntax\">cy.get()</a>\npara capturar o elemento. Se o elemento estiver sendo carregado de forma\nassíncrona, essa função vai esperar por <em>defaultCommandTimeout</em> para aparecer (o\nvalor padrão é 4 segundos e pode ser configurado em\n<a href=\"https://docs.cypress.io/guides/references/configuration.html#Timeouts\">cypress.json</a>).</p>\n<p>Resultado dos nossos testes:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*yZFX1NmJavGysMbeYntbUQ.png\">\n<span class=\"figcaption_hack\">Verificando elemento</span></p>\n<p>Mas, se por algum motivo cometermos algum erro no teste, veja como vai ser o\nresultado:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*YvE1hed6KvHJ7TBH1j-JOg.png\">\n<span class=\"figcaption_hack\">Erro na verificação do elemento</span></p>\n<h3>Testando a responsividade</h3>\n<p>Vamos fazer um teste um pouco diferente. Atualmente tenho que ter a certeza que\no site vai funcionar em dimensões diferentes. Dessa forma, todos os usuários\nconsigam usar corretamente.</p>\n<p>Como ainda estamos testando a mesma página, apenas acrescentaremos outro\n<em>describe</em> dentro do existente. Aqui testamos o tamanho de 320px de largura e\nverificamos se a imagem de perfil ainda esta visível. Para alterar a largura\npara este teste, podemos utilizar\n<a href=\"https://docs.cypress.io/api/commands/viewport.html#Syntax\">cy.viewport()</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">describe(&#39;with a 320x568 viewport&#39;, () =&gt; {\n  beforeEach(() =&gt; {\n    cy.viewport(320, 568);\n  })\n\n  it(&#39;has a visible mobile profile picture&#39;, () =&gt; {\n    cy.get(&#39;.img_profile&#39;).should(&#39;be.visible&#39;)\n  })\n})</code></pre></div>\n<p>Por padrão o tamanho é 1000×660, mas podemos alterar no arquivo de configuração,\n<em>cypress.json</em> mencionado anteriormente. Você pode testar qualquer dimensão,\nveja como ficou nosso teste no mobile:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*TB71xoVOqBCoE26FHt3Vjg.png\">\n<span class=\"figcaption_hack\">Testes em mobile</span></p>\n<h3>Quero me aprofundar</h3>\n<p><a href=\"https://docs.cypress.io/api/introduction/api.html#Sections\">Na própria\ndocumentação</a> você\nvai encontrar vários exemplos. Porém se quiser algo visível, quando instalar o\n<em>Cypress</em>, vai ter uma pasta chamada “examples” com mais de 100 testes para\nserem executados.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*L2_GisT-XWYYqRDF8HLquA.png\">\n<span class=\"figcaption_hack\">Outros tipos de testes</span></p>\n<p>Como você pode ver na imagem, existe vários tipos de funções. Uma coisa legal e\nque não foi explorado neste artigo, é como o <em>Cypress</em> fica entre as respostas\n<em>ajax</em> e o <em>front-end</em>. Podemos controlar os resultados que recebemos do\nservidor.</p>\n<p><strong>A medida que seu projeto vai ganhando novas funcionalidades, as chances de\nerros acontecerem aumentam consideravelmente.</strong> E sei bem que você não quer\nisso. Então, basta testar e começar implementar em seus projetos.</p>\n<p><strong>Os códigos dos exemplos estão no <a href=\"https://github.com/TailoMateus/testing_personal_site_cypress\">GitHub</a></strong>.</p>\n<h3><strong>Créditos e Referências:</strong></h3>\n<p><a href=\"https://docs.cypress.io/api/introduction/api.html#Sections\">Documentação\nCypress</a><br> <a href=\"https://css-tricks.com/an-intro-to-web-app-testing-with-cypress-io/\">An\nIntro to Web Site Testing with\nCypress</a></p>","timeToRead":5}},"pageContext":{"slug":"/testando-aplicacoes-com-cypress/","previousPost":{"frontmatter":{"title":"Analisando a solução para um Sudoku"},"fields":{"slug":"/analisando-solucao-sudoku/"}},"nextPost":{"fields":{"slug":"/review-anual-2018/"},"frontmatter":{"title":"Review anual - Os textos que você não pode perder"}}}}}